{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPQFmVgAm2dnaJAQhr6ocRM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"cDLslqkzXSq0","executionInfo":{"status":"error","timestamp":1752874464352,"user_tz":240,"elapsed":244419,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"b8a33fc2-6d08-4041-b686-972224cf0c58"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","   HeartDiseaseorAttack  HighBP  HighChol  CholCheck   BMI  Smoker  Stroke  \\\n","0                   0.0     1.0       1.0        1.0  40.0     1.0     0.0   \n","1                   0.0     0.0       0.0        0.0  25.0     1.0     0.0   \n","2                   0.0     1.0       1.0        1.0  28.0     0.0     0.0   \n","3                   0.0     1.0       0.0        1.0  27.0     0.0     0.0   \n","4                   0.0     1.0       1.0        1.0  24.0     0.0     0.0   \n","\n","   Diabetes  PhysActivity  Fruits  ...  AnyHealthcare  NoDocbcCost  GenHlth  \\\n","0       0.0           0.0     0.0  ...            1.0          0.0      5.0   \n","1       0.0           1.0     0.0  ...            0.0          1.0      3.0   \n","2       0.0           0.0     1.0  ...            1.0          1.0      5.0   \n","3       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n","4       0.0           1.0     1.0  ...            1.0          0.0      2.0   \n","\n","   MentHlth  PhysHlth  DiffWalk  Sex   Age  Education  Income  \n","0      18.0      15.0       1.0  0.0   9.0        4.0     3.0  \n","1       0.0       0.0       0.0  0.0   7.0        6.0     1.0  \n","2      30.0      30.0       1.0  0.0   9.0        4.0     8.0  \n","3       0.0       0.0       0.0  0.0  11.0        3.0     6.0  \n","4       3.0       0.0       0.0  0.0  11.0        5.0     4.0  \n","\n","[5 rows x 22 columns]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m23s\u001b[0m 3ms/step - accuracy: 0.8992 - loss: 0.2655 - val_accuracy: 0.9076 - val_loss: 0.2377\n","Epoch 2/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 3ms/step - accuracy: 0.9060 - loss: 0.2425 - val_accuracy: 0.9078 - val_loss: 0.2382\n","Epoch 3/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 3ms/step - accuracy: 0.9064 - loss: 0.2415 - val_accuracy: 0.9069 - val_loss: 0.2376\n","Epoch 4/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 3ms/step - accuracy: 0.9069 - loss: 0.2405 - val_accuracy: 0.9073 - val_loss: 0.2387\n","Epoch 5/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m21s\u001b[0m 3ms/step - accuracy: 0.9084 - loss: 0.2378 - val_accuracy: 0.9076 - val_loss: 0.2370\n","Epoch 6/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m17s\u001b[0m 3ms/step - accuracy: 0.9075 - loss: 0.2376 - val_accuracy: 0.9079 - val_loss: 0.2373\n","Epoch 7/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.9077 - loss: 0.2386 - val_accuracy: 0.9073 - val_loss: 0.2373\n","Epoch 8/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 3ms/step - accuracy: 0.9072 - loss: 0.2383 - val_accuracy: 0.9072 - val_loss: 0.2372\n","Epoch 9/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m20s\u001b[0m 3ms/step - accuracy: 0.9071 - loss: 0.2381 - val_accuracy: 0.9068 - val_loss: 0.2374\n","Epoch 10/50\n","\u001b[1m6342/6342\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m18s\u001b[0m 3ms/step - accuracy: 0.9063 - loss: 0.2403 - val_accuracy: 0.9059 - val_loss: 0.2385\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-1-1932935889.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[0;31m# Train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 56\u001b[0;31m history = model.fit(\n\u001b[0m\u001b[1;32m     57\u001b[0m     \u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m50\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    115\u001b[0m         \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m             \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","data_path = '/content/drive/My Drive/heart/heart_disease_health_indicators_BRFSS2015.csv'\n","\n","df = pd.read_csv(data_path)\n","\n","print(df.head())\n","\n","X = df.drop('HeartDiseaseorAttack', axis=1)\n","y = df['HeartDiseaseorAttack']\n","\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_scaled, y, test_size=0.2, stratify=y, random_state=42\n",")\n","\n","model = Sequential([\n","    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n","    Dropout(0.3),\n","    Dense(32, activation='relu'),\n","    Dropout(0.2),\n","    Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(\n","    optimizer='adam',\n","    loss='binary_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n","\n","history = model.fit(\n","    X_train, y_train,\n","    epochs=50,\n","    batch_size=32,\n","    validation_data=(X_val, y_val),\n","    callbacks=[early_stop]\n",")\n","\n","val_loss, val_acc = model.evaluate(X_val, y_val)\n","print(f\"Validation Accuracy: {val_acc:.4f}\")\n"]}]}