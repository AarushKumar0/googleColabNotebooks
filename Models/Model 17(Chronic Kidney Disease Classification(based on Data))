{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOZjBr1SW3Ru8elqKibG03r"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZkkGO6PTHjcP","executionInfo":{"status":"ok","timestamp":1753860927630,"user_tz":240,"elapsed":28117,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"a3232fa0-7bd7-48c8-d20a-ccda0ad9e1f0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n","from sklearn.impute import SimpleImputer\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","train_dir= '/content/drive/My Drive/chronicKidney/kidney_disease_train.csv'\n","test_dir= '/content/drive/My Drive/chronicKidney/kidney_disease_test.csv'\n","\n","\n","\n"]},{"cell_type":"code","source":["\n","train_df = pd.read_csv(train_dir)\n","\n","# Drop ID column\n","train_df = train_df.drop(columns=[\"id\"])\n","\n","# Binary target\n","train_df[\"classification\"] = train_df[\"classification\"].apply(lambda x: 1 if x.strip().lower() == \"ckd\" else 0)\n","\n","# Split into features and labels\n","X = train_df.drop(\"classification\", axis=1)\n","y = train_df[\"classification\"]\n","\n","# Handle numeric/categorical\n","categorical_cols = X.select_dtypes(include=\"object\").columns\n","numeric_cols = X.select_dtypes(exclude=\"object\").columns\n","\n","# Fill missing\n","X[categorical_cols] = X[categorical_cols].fillna(\"missing\")\n","X[numeric_cols] = X[numeric_cols].apply(pd.to_numeric, errors=\"coerce\").fillna(X[numeric_cols].median())\n","\n","# One-hot encode categoricals\n","X = pd.get_dummies(X, columns=categorical_cols)\n","\n","# Normalize numeric features\n","scaler = StandardScaler()\n","X[numeric_cols] = scaler.fit_transform(X[numeric_cols])\n","\n","# Split train/val\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n"],"metadata":{"id":"21_foJLLIS5E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = Sequential([\n","    Dense(128, activation=\"relu\", input_shape=(X_train.shape[1],)),\n","    Dropout(0.3),\n","    Dense(64, activation=\"relu\"),\n","    Dropout(0.3),\n","    Dense(1, activation=\"sigmoid\")\n","])\n","\n","model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])\n","\n","early_stop = EarlyStopping(monitor=\"val_loss\", patience=5, restore_best_weights=True)\n","\n","history = model.fit(\n","    X_train, y_train,\n","    validation_data=(X_val, y_val),\n","    epochs=30,\n","    batch_size=32,\n","    callbacks=[early_stop],\n","    verbose=1\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ST5Pb3LIqQs","executionInfo":{"status":"ok","timestamp":1753860945012,"user_tz":240,"elapsed":16149,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"0c8f2302-802c-48f6-8fc7-48a8ca98ae34"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 142ms/step - accuracy: 0.4961 - loss: 0.6957 - val_accuracy: 0.7857 - val_loss: 0.5359\n","Epoch 2/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 13ms/step - accuracy: 0.8667 - loss: 0.4893 - val_accuracy: 0.9821 - val_loss: 0.3860\n","Epoch 3/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9374 - loss: 0.3694 - val_accuracy: 1.0000 - val_loss: 0.2613\n","Epoch 4/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9884 - loss: 0.2414 - val_accuracy: 0.9821 - val_loss: 0.1675\n","Epoch 5/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9834 - loss: 0.1588 - val_accuracy: 0.9821 - val_loss: 0.1068\n","Epoch 6/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9705 - loss: 0.0937 - val_accuracy: 1.0000 - val_loss: 0.0690\n","Epoch 7/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9971 - loss: 0.0608 - val_accuracy: 1.0000 - val_loss: 0.0479\n","Epoch 8/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9932 - loss: 0.0448 - val_accuracy: 1.0000 - val_loss: 0.0358\n","Epoch 9/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.0261 - val_accuracy: 1.0000 - val_loss: 0.0281\n","Epoch 10/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.0255 - val_accuracy: 1.0000 - val_loss: 0.0237\n","Epoch 11/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9965 - loss: 0.0180 - val_accuracy: 1.0000 - val_loss: 0.0196\n","Epoch 12/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 1.0000 - loss: 0.0164 - val_accuracy: 1.0000 - val_loss: 0.0169\n","Epoch 13/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 1.0000 - loss: 0.0091 - val_accuracy: 1.0000 - val_loss: 0.0148\n","Epoch 14/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step - accuracy: 1.0000 - loss: 0.0106 - val_accuracy: 1.0000 - val_loss: 0.0127\n","Epoch 15/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - accuracy: 0.9893 - loss: 0.0285 - val_accuracy: 1.0000 - val_loss: 0.0122\n","Epoch 16/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - accuracy: 1.0000 - loss: 0.0082 - val_accuracy: 1.0000 - val_loss: 0.0109\n","Epoch 17/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.0103 - val_accuracy: 1.0000 - val_loss: 0.0098\n","Epoch 18/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step - accuracy: 1.0000 - loss: 0.0054 - val_accuracy: 1.0000 - val_loss: 0.0091\n","Epoch 19/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step - accuracy: 1.0000 - loss: 0.0043 - val_accuracy: 1.0000 - val_loss: 0.0088\n","Epoch 20/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - accuracy: 1.0000 - loss: 0.0042 - val_accuracy: 1.0000 - val_loss: 0.0086\n","Epoch 21/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step - accuracy: 1.0000 - loss: 0.0041 - val_accuracy: 1.0000 - val_loss: 0.0087\n","Epoch 22/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step - accuracy: 1.0000 - loss: 0.0062 - val_accuracy: 1.0000 - val_loss: 0.0075\n","Epoch 23/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 45ms/step - accuracy: 1.0000 - loss: 0.0046 - val_accuracy: 1.0000 - val_loss: 0.0071\n","Epoch 24/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 74ms/step - accuracy: 1.0000 - loss: 0.0052 - val_accuracy: 1.0000 - val_loss: 0.0059\n","Epoch 25/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step - accuracy: 1.0000 - loss: 0.0043 - val_accuracy: 1.0000 - val_loss: 0.0057\n","Epoch 26/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 1.0000 - val_loss: 0.0057\n","Epoch 27/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step - accuracy: 1.0000 - loss: 0.0025 - val_accuracy: 1.0000 - val_loss: 0.0055\n","Epoch 28/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 41ms/step - accuracy: 1.0000 - loss: 0.0024 - val_accuracy: 1.0000 - val_loss: 0.0049\n","Epoch 29/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 45ms/step - accuracy: 1.0000 - loss: 0.0036 - val_accuracy: 1.0000 - val_loss: 0.0045\n","Epoch 30/30\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - accuracy: 1.0000 - loss: 0.0032 - val_accuracy: 1.0000 - val_loss: 0.0044\n"]}]},{"cell_type":"code","source":["# Load test set\n","test_df = pd.read_csv(test_dir)\n","\n","# Save original test IDs if needed\n","test_ids = test_df[\"id\"]\n","\n","# Drop ID\n","test_df = test_df.drop(columns=[\"id\"])\n","\n","# Target\n","test_df[\"classification\"] = test_df[\"classification\"].apply(lambda x: 1 if x.strip().lower() == \"ckd\" else 0)\n","\n","# Separate features and labels\n","X_test = test_df.drop(\"classification\", axis=1)\n","y_test = test_df[\"classification\"]\n","\n","# Match column types\n","X_test[categorical_cols] = X_test[categorical_cols].fillna(\"missing\")\n","X_test[numeric_cols] = X_test[numeric_cols].apply(pd.to_numeric, errors=\"coerce\").fillna(X[numeric_cols].median())\n","\n","# One-hot encode\n","X_test = pd.get_dummies(X_test, columns=categorical_cols)\n","\n","# Ensure same columns as training set\n","X_test = X_test.reindex(columns=X.columns, fill_value=0)\n","\n","# Scale numeric\n","X_test[numeric_cols] = scaler.transform(X_test[numeric_cols])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RdGDRKByIq20","executionInfo":{"status":"ok","timestamp":1753861069598,"user_tz":240,"elapsed":11,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"7a530beb-5daa-44cf-e41e-44cf11fdf886"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['id', 'age', 'bp', 'sg', 'al', 'su', 'rbc', 'pc', 'pcc', 'ba', 'bgr',\n","       'bu', 'sc', 'sod', 'pot', 'hemo', 'pcv', 'wc', 'rc', 'htn', 'dm', 'cad',\n","       'appet', 'pe', 'ane'],\n","      dtype='object')\n"]}]},{"cell_type":"code","source":["test_loss, test_acc = model.evaluate(X_test, y_test)\n","print(f\"Test Accuracy: {test_acc:.4f}\")\n"],"metadata":{"id":"GwYGhxefI1Y0"},"execution_count":null,"outputs":[]}]}