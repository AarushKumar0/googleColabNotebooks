{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNzD0GoJqf1w287KDz0tkny"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U8ID5Y-sNXpH","executionInfo":{"status":"ok","timestamp":1750874784952,"user_tz":240,"elapsed":17588,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"29d3e751-b0ce-41a3-a352-08d031ee5049"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount(\"/content/drive\", force_remount=True)"]},{"cell_type":"code","source":["data_dir = '/content/drive/My Drive/brain_project/brain'"],"metadata":{"id":"lvoyRedRNhs7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import random\n","import shutil\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization"],"metadata":{"id":"VBni_mYVOQdX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os, random, shutil\n","\n","data_dir = '/content/drive/MyDrive/ brain_project/brain'\n","\n","base_dir = '/content/mcnd_split'\n","train_dir = os.path.join(base_dir, 'train')\n","val_dir = os.path.join(base_dir, 'val')\n","test_dir = os.path.join(base_dir, 'test')\n","\n","# Create main folders\n","os.makedirs(train_dir, exist_ok=True)\n","os.makedirs(val_dir, exist_ok=True)\n","os.makedirs(test_dir, exist_ok=True)\n","\n","# List all class folders\n","classes = os.listdir(data_dir)\n","\n","for class_name in classes:\n","    class_path = os.path.join(data_dir, class_name)\n","    if not os.path.isdir(class_path): continue\n","\n","    images = os.listdir(class_path)\n","    random.shuffle(images)\n","\n","    total = len(images)\n","    train_split = int(total * 0.7)\n","    val_split = int(total * 0.85)  # 70% train + 15% val\n","\n","    train_images = images[:train_split]\n","    val_images = images[train_split:val_split]\n","    test_images = images[val_split:]\n","\n","    # Make class subfolders\n","    for folder in [train_dir, val_dir, test_dir]:\n","        os.makedirs(os.path.join(folder, class_name), exist_ok=True)\n","\n","    # Copy images to each folder\n","    for img in train_images:\n","        shutil.copy(os.path.join(class_path, img), os.path.join(train_dir, class_name, img))\n","\n","    for img in val_images:\n","        shutil.copy(os.path.join(class_path, img), os.path.join(val_dir, class_name, img))\n","\n","    for img in test_images:\n","        shutil.copy(os.path.join(class_path, img), os.path.join(test_dir, class_name, img))"],"metadata":{"id":"-kfnjzRSPr-K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.regularizers import l2\n","\n","\n","train_datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=20,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    shear_range=0.1,\n","    zoom_range=0.1,\n","    horizontal_flip=False,\n","    fill_mode='nearest'\n",")\n","val_test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","train_loader = train_datagen.flow_from_directory(\n","    train_dir,\n","    target_size=(224, 224),\n","    batch_size=32,\n","    class_mode='categorical',\n","    shuffle = True\n",")\n","val_loader = val_test_datagen.flow_from_directory(\n","    val_dir,\n","    target_size=(224, 224),\n","    batch_size=32,\n","    class_mode='categorical'\n",")\n","test_loader = val_test_datagen.flow_from_directory(\n","    test_dir,\n","    target_size=(224, 224),\n","    batch_size=32,\n","    class_mode='categorical',\n","    shuffle=False\n",")\n","\n","\n"],"metadata":{"id":"W2lJSVYySKtU","executionInfo":{"status":"ok","timestamp":1750875150211,"user_tz":240,"elapsed":134,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9980f713-da10-411b-8f50-8dd4bd7219dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 11491 images belonging to 8 classes.\n","Found 2464 images belonging to 8 classes.\n","Found 2465 images belonging to 8 classes.\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.applications import EfficientNetB0\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dropout, Dense\n","from tensorflow.keras.optimizers import Adam\n","from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n","from sklearn.utils import class_weight\n","import numpy as np\n","\n","class_weights_array = class_weight.compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(train_loader.classes),\n","    y=train_loader.classes\n",")\n","class_weights = dict(enumerate(class_weights_array))\n","\n","early_stop = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n","reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=2, verbose=1)\n","\n","from tensorflow.keras.applications import DenseNet121\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Dropout, Dense\n","from tensorflow.keras.optimizers import Adam\n","\n","base_model = DenseNet121(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n","base_model.trainable = True\n","\n","x = base_model.output\n","x = GlobalAveragePooling2D()(x)\n","x = Dropout(0.5)(x)\n","output = Dense(8, activation='softmax')(x)\n","\n","model = Sequential([\n","\n"," Conv2D(32, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001), input_shape=(224,224,3)), BatchNormalization(), Conv2D(32, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)), BatchNormalization(), MaxPooling2D(2,2), Dropout(0.25),\n","\n","\n","Conv2D(64, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","Conv2D(64, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","MaxPooling2D(2,2),\n","Dropout(0.3),\n","\n","# Block 3\n","Conv2D(128, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","Conv2D(128, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","MaxPooling2D(2,2),\n","Dropout(0.4),\n","\n","# Block 4\n","Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","Conv2D(256, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","MaxPooling2D(2,2),\n","Dropout(0.5),\n","\n","# Block 5 – NEW!\n","Conv2D(512, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","Conv2D(512, (3,3), activation='relu', padding='same', kernel_regularizer=l2(0.001)),\n","BatchNormalization(),\n","MaxPooling2D(2,2),\n","Dropout(0.5),\n","\n","# Fully Connected Head\n","Flatten(),\n","Dense(1024, activation='relu'),\n","Dropout(0.5),\n","Dense(256, activation='relu'),\n","Dropout(0.4),\n","Dense(8, activation='softmax')\n","])\n","\n","\n","\n","\n","model.compile(\n","    optimizer=Adam(learning_rate=1e-5),\n","    loss='categorical_crossentropy',\n","    metrics=['accuracy']\n",")\n","\n","\n","\n","history = model.fit(\n","    train_loader,\n","    epochs=30,\n","    validation_data=val_loader,\n","    class_weight=class_weights,\n","    callbacks=[early_stop, reduce_lr]\n",")\n","\n","\n","\n","test_loss, test_acc = model.evaluate(test_loader)\n","print(f\"Test Accuracy: {test_acc:.4f}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eSpgohUcskws","outputId":"7b45f43f-e19a-4f41-8f53-8ab31028b95a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/densenet/densenet121_weights_tf_dim_ordering_tf_kernels_notop.h5\n","\u001b[1m29084464/29084464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m499s\u001b[0m 876ms/step - accuracy: 0.2055 - loss: 2.2066 - val_accuracy: 0.3373 - val_loss: 1.5572 - learning_rate: 1.0000e-05\n","Epoch 2/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.4010 - loss: 1.3015 - val_accuracy: 0.4813 - val_loss: 1.1807 - learning_rate: 1.0000e-05\n","Epoch 3/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.4894 - loss: 1.0358 - val_accuracy: 0.5970 - val_loss: 0.9235 - learning_rate: 1.0000e-05\n","Epoch 4/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 558ms/step - accuracy: 0.5514 - loss: 0.8555 - val_accuracy: 0.6437 - val_loss: 0.8203 - learning_rate: 1.0000e-05\n","Epoch 5/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m196s\u001b[0m 545ms/step - accuracy: 0.5908 - loss: 0.7824 - val_accuracy: 0.6814 - val_loss: 0.7353 - learning_rate: 1.0000e-05\n","Epoch 6/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 561ms/step - accuracy: 0.6219 - loss: 0.6910 - val_accuracy: 0.6907 - val_loss: 0.7046 - learning_rate: 1.0000e-05\n","Epoch 7/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 547ms/step - accuracy: 0.6439 - loss: 0.6311 - val_accuracy: 0.7147 - val_loss: 0.6183 - learning_rate: 1.0000e-05\n","Epoch 8/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 558ms/step - accuracy: 0.6675 - loss: 0.5702 - val_accuracy: 0.7261 - val_loss: 0.6087 - learning_rate: 1.0000e-05\n","Epoch 9/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.6692 - loss: 0.5584 - val_accuracy: 0.7228 - val_loss: 0.6285 - learning_rate: 1.0000e-05\n","Epoch 10/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 548ms/step - accuracy: 0.6909 - loss: 0.4887 - val_accuracy: 0.7484 - val_loss: 0.5524 - learning_rate: 1.0000e-05\n","Epoch 11/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 558ms/step - accuracy: 0.6989 - loss: 0.4872 - val_accuracy: 0.7593 - val_loss: 0.5502 - learning_rate: 1.0000e-05\n","Epoch 12/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 558ms/step - accuracy: 0.7150 - loss: 0.4367 - val_accuracy: 0.7699 - val_loss: 0.4978 - learning_rate: 1.0000e-05\n","Epoch 13/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 546ms/step - accuracy: 0.7360 - loss: 0.4133 - val_accuracy: 0.7910 - val_loss: 0.4679 - learning_rate: 1.0000e-05\n","Epoch 14/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 548ms/step - accuracy: 0.7486 - loss: 0.3816 - val_accuracy: 0.7861 - val_loss: 0.4827 - learning_rate: 1.0000e-05\n","Epoch 15/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m202s\u001b[0m 559ms/step - accuracy: 0.7680 - loss: 0.3625 - val_accuracy: 0.8137 - val_loss: 0.4214 - learning_rate: 1.0000e-05\n","Epoch 16/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.7810 - loss: 0.3214 - val_accuracy: 0.8393 - val_loss: 0.3826 - learning_rate: 1.0000e-05\n","Epoch 17/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 564ms/step - accuracy: 0.7959 - loss: 0.3006 - val_accuracy: 0.8243 - val_loss: 0.4068 - learning_rate: 1.0000e-05\n","Epoch 18/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m268s\u001b[0m 579ms/step - accuracy: 0.8013 - loss: 0.2821 - val_accuracy: 0.8324 - val_loss: 0.3706 - learning_rate: 1.0000e-05\n","Epoch 19/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 548ms/step - accuracy: 0.8175 - loss: 0.2725 - val_accuracy: 0.8575 - val_loss: 0.3268 - learning_rate: 1.0000e-05\n","Epoch 20/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.8378 - loss: 0.2475 - val_accuracy: 0.8519 - val_loss: 0.3487 - learning_rate: 1.0000e-05\n","Epoch 21/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m205s\u001b[0m 554ms/step - accuracy: 0.8374 - loss: 0.2228 - val_accuracy: 0.8669 - val_loss: 0.3187 - learning_rate: 1.0000e-05\n","Epoch 22/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m198s\u001b[0m 549ms/step - accuracy: 0.8500 - loss: 0.2061 - val_accuracy: 0.8742 - val_loss: 0.2971 - learning_rate: 1.0000e-05\n","Epoch 23/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m196s\u001b[0m 544ms/step - accuracy: 0.8578 - loss: 0.2021 - val_accuracy: 0.8612 - val_loss: 0.3300 - learning_rate: 1.0000e-05\n","Epoch 24/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 530ms/step - accuracy: 0.8561 - loss: 0.2052\n","Epoch 24: ReduceLROnPlateau reducing learning rate to 1.9999999494757505e-06.\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 547ms/step - accuracy: 0.8561 - loss: 0.2051 - val_accuracy: 0.8738 - val_loss: 0.3054 - learning_rate: 1.0000e-05\n","Epoch 25/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m200s\u001b[0m 557ms/step - accuracy: 0.8766 - loss: 0.1694 - val_accuracy: 0.8811 - val_loss: 0.2893 - learning_rate: 2.0000e-06\n","Epoch 26/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 548ms/step - accuracy: 0.8675 - loss: 0.1796 - val_accuracy: 0.8811 - val_loss: 0.2805 - learning_rate: 2.0000e-06\n","Epoch 27/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 546ms/step - accuracy: 0.8733 - loss: 0.1766 - val_accuracy: 0.8831 - val_loss: 0.2776 - learning_rate: 2.0000e-06\n","Epoch 28/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m197s\u001b[0m 545ms/step - accuracy: 0.8723 - loss: 0.1642 - val_accuracy: 0.8839 - val_loss: 0.2761 - learning_rate: 2.0000e-06\n","Epoch 29/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 548ms/step - accuracy: 0.8749 - loss: 0.1716 - val_accuracy: 0.8868 - val_loss: 0.2665 - learning_rate: 2.0000e-06\n","Epoch 30/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m200s\u001b[0m 555ms/step - accuracy: 0.8795 - loss: 0.1651 - val_accuracy: 0.8884 - val_loss: 0.2694 - learning_rate: 2.0000e-06\n","Epoch 1/30\n","\u001b[1m360/360\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 820ms/step - accuracy: 0.8739 - loss: 0.1929"]}]},{"cell_type":"markdown","source":[],"metadata":{"id":"bmKXWJaQgh1f"}}]}