{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOflBLUYhXu4Jf6rfEvz+yG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"LeqGEkKctblZ","executionInfo":{"status":"ok","timestamp":1756586899505,"user_tz":240,"elapsed":32401,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"9f54a626-4f31-4464-e5cb-825f354fd5e1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Initial dataset shape: (3276, 10)\n","         ph    Hardness        Solids  Chloramines     Sulfate  Conductivity  \\\n","0       NaN  204.890455  20791.318981     7.300212  368.516441    564.308654   \n","1  3.716080  129.422921  18630.057858     6.635246         NaN    592.885359   \n","2  8.099124  224.236259  19909.541732     9.275884         NaN    418.606213   \n","3  8.316766  214.373394  22018.417441     8.059332  356.886136    363.266516   \n","4  9.092223  181.101509  17978.986339     6.546600  310.135738    398.410813   \n","\n","   Organic_carbon  Trihalomethanes  Turbidity  Potability  \n","0       10.379783        86.990970   2.963135           0  \n","1       15.180013        56.329076   4.500656           0  \n","2       16.868637        66.420093   3.055934           0  \n","3       18.436524       100.341674   4.628771           0  \n","4       11.558279        31.997993   4.075075           0  \n","Before balancing: [1598 1022]\n","After SMOTE: [1598 1598]\n","Class weights: {0: np.float64(0.8197747183979975), 1: np.float64(1.2818003913894325)}\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13s\u001b[0m 55ms/step - accuracy: 0.5027 - loss: 0.8092 - val_accuracy: 0.3902 - val_loss: 0.7655\n","Epoch 2/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5356 - loss: 0.7305 - val_accuracy: 0.3918 - val_loss: 0.7708\n","Epoch 3/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5255 - loss: 0.7235 - val_accuracy: 0.3963 - val_loss: 0.7718\n","Epoch 4/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5357 - loss: 0.7092 - val_accuracy: 0.4421 - val_loss: 0.7425\n","Epoch 5/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.5666 - loss: 0.6860 - val_accuracy: 0.4619 - val_loss: 0.7193\n","Epoch 6/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5616 - loss: 0.6726 - val_accuracy: 0.5046 - val_loss: 0.7083\n","Epoch 7/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.5905 - loss: 0.6582 - val_accuracy: 0.4939 - val_loss: 0.7083\n","Epoch 8/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6074 - loss: 0.6536 - val_accuracy: 0.5107 - val_loss: 0.7104\n","Epoch 9/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.5876 - loss: 0.6510 - val_accuracy: 0.5229 - val_loss: 0.6999\n","Epoch 10/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.6236 - loss: 0.6430 - val_accuracy: 0.5259 - val_loss: 0.6942\n","Epoch 11/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6146 - loss: 0.6425 - val_accuracy: 0.5137 - val_loss: 0.7071\n","Epoch 12/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6043 - loss: 0.6502 - val_accuracy: 0.5381 - val_loss: 0.6934\n","Epoch 13/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6130 - loss: 0.6361 - val_accuracy: 0.5366 - val_loss: 0.6949\n","Epoch 14/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6301 - loss: 0.6253 - val_accuracy: 0.5396 - val_loss: 0.6983\n","Epoch 15/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6309 - loss: 0.6164 - val_accuracy: 0.5686 - val_loss: 0.6902\n","Epoch 16/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6265 - loss: 0.6263 - val_accuracy: 0.5473 - val_loss: 0.7058\n","Epoch 17/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6345 - loss: 0.6262 - val_accuracy: 0.5488 - val_loss: 0.6924\n","Epoch 18/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6234 - loss: 0.6301 - val_accuracy: 0.5488 - val_loss: 0.6871\n","Epoch 19/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6426 - loss: 0.6231 - val_accuracy: 0.5518 - val_loss: 0.6968\n","Epoch 20/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6476 - loss: 0.6150 - val_accuracy: 0.5579 - val_loss: 0.6955\n","Epoch 21/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6461 - loss: 0.6082 - val_accuracy: 0.5549 - val_loss: 0.6936\n","Epoch 22/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.6432 - loss: 0.6062 - val_accuracy: 0.5503 - val_loss: 0.7005\n","Epoch 23/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.6451 - loss: 0.6140 - val_accuracy: 0.5595 - val_loss: 0.6964\n","Epoch 24/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6500 - loss: 0.6031 - val_accuracy: 0.5640 - val_loss: 0.7089\n","Epoch 25/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6701 - loss: 0.5919 - val_accuracy: 0.5701 - val_loss: 0.7055\n","Epoch 26/50\n","\u001b[1m100/100\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.6418 - loss: 0.6128 - val_accuracy: 0.5595 - val_loss: 0.7007\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ Test Accuracy: 0.5488\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 25ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.71      0.45      0.55       400\n","           1       0.45      0.71      0.55       256\n","\n","    accuracy                           0.55       656\n","   macro avg       0.58      0.58      0.55       656\n","weighted avg       0.61      0.55      0.55       656\n","\n","\n","Confusion Matrix:\n"," [[178 222]\n"," [ 74 182]]\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.utils.class_weight import compute_class_weight\n","from imblearn.over_sampling import SMOTE\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Example: your dataset is in Google Drive\n","url = \"/content/drive/My Drive/water/water_potability.csv\"\n","data = pd.read_csv(url)\n","\n","print(\"Initial dataset shape:\", data.shape)\n","print(data.head())\n","\n","# 4. Handle missing values (mean imputation)\n","data = data.fillna(data.mean())\n","\n","# 5. Features and labels\n","X = data.drop(\"Potability\", axis=1)\n","y = data[\"Potability\"]\n","\n","# 6. Train/test split\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n","\n","print(\"Before balancing:\", np.bincount(y_train))\n","\n","# 7. Balance dataset with SMOTE\n","smote = SMOTE(random_state=42)\n","X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n","\n","print(\"After SMOTE:\", np.bincount(y_train_bal))\n","\n","# 8. Scale features\n","scaler = StandardScaler()\n","X_train_bal = scaler.fit_transform(X_train_bal)\n","X_test = scaler.transform(X_test)\n","\n","# 9. Compute class weights (for extra fairness in case imbalance remains)\n","class_weights = compute_class_weight(\n","    class_weight=\"balanced\",\n","    classes=np.unique(y_train),\n","    y=y_train\n",")\n","cw = dict(enumerate(class_weights))\n","print(\"Class weights:\", cw)\n","\n","# 10. Define custom NN\n","model = Sequential([\n","    Dense(256, activation=\"relu\", input_shape=(X_train_bal.shape[1],)),\n","    BatchNormalization(),\n","    Dropout(0.4),\n","\n","    Dense(158, activation=\"relu\"),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(64, activation=\"relu\"),\n","    Dropout(0.2),\n","\n","    Dense(64, activation=\"relu\"),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(32, activation=\"relu\"),\n","    Dropout(0.2),\n","\n","    Dense(1, activation=\"sigmoid\")\n","])\n","\n","# 11. Compile model\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n","    loss=\"binary_crossentropy\",\n","    metrics=[\"accuracy\"]\n",")\n","\n","# 12. Early stopping\n","early_stop = EarlyStopping(\n","    monitor=\"val_loss\",\n","    patience=8,\n","    restore_best_weights=True\n",")\n","\n","# 13. Train model\n","history = model.fit(\n","    X_train_bal, y_train_bal,\n","    validation_data=(X_test, y_test),\n","    epochs=50,\n","    batch_size=32,\n","    class_weight=cw,   # helps recall for minority class\n","    callbacks=[early_stop],\n","    verbose=1\n",")\n","\n","# 14. Plot training curves\n","plt.plot(history.history[\"accuracy\"], label=\"Train Acc\")\n","plt.plot(history.history[\"val_accuracy\"], label=\"Val Acc\")\n","plt.legend()\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Training vs Validation Accuracy\")\n","plt.show()\n","\n","# 15. Evaluate on test set\n","loss, acc = model.evaluate(X_test, y_test, verbose=0)\n","print(f\"\\n✅ Test Accuracy: {acc:.4f}\")\n","\n","# 16. Classification Report\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","y_pred = (model.predict(X_test) > 0.5).astype(\"int32\")\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n","\n","print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n"]}]}