{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNv7XI6/pfsOXs3c2dDnVaX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hyFBRCr2vqBH","executionInfo":{"status":"ok","timestamp":1756587137848,"user_tz":240,"elapsed":56576,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"2a8cb4bc-23ac-4f52-d408-97cd0757d479"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Dataset shape: (500, 14)\n","        PM2.5        PM10         NOx        NO2        SO2        VOCs  \\\n","0   39.967142   57.926035  116.192213  55.230299   4.531693   75.317261   \n","1  101.935672  150.774299   76.826826  79.051618  18.744780  145.083987   \n","2   70.996192  138.948796  158.731020  60.466604  14.892239  145.147338   \n","3   28.464728   63.643900   25.385343  15.333286   7.647429  130.022319   \n","4   78.265276  113.977926  105.644340  59.202337  17.696806  181.713667   \n","\n","         CO         CO2       CH4  Temperature   Humidity  Wind_Direction  \\\n","0  2.789606  427.674347  1.706105    31.085120  45.454749             276   \n","1  1.966569  529.739619  2.492663    33.711103  60.798212             134   \n","2  2.626446  499.889443  2.431165    33.778698  54.875669               1   \n","3  1.779360  388.283712  1.818563    31.565877  67.113319             251   \n","4  3.240533  464.739197  2.597225    32.229835  37.236519             326   \n","\n","  Location_Type     Source_Label  \n","0         Urban        Vehicular  \n","1    Industrial       Industrial  \n","2    Industrial       Industrial  \n","3         Rural  Biomass Burning  \n","4    Industrial       Industrial  \n","Class distribution after SMOTE: [142 142 142]\n","Class weights: {0: np.float64(0.9732360097323601), 1: np.float64(0.9389671361502347), 2: np.float64(1.1019283746556474)}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 336ms/step - accuracy: 0.5080 - loss: 1.2502 - val_accuracy: 0.9900 - val_loss: 0.6794\n","Epoch 2/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.8956 - loss: 0.3184 - val_accuracy: 1.0000 - val_loss: 0.4006\n","Epoch 3/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step - accuracy: 0.9786 - loss: 0.1391 - val_accuracy: 1.0000 - val_loss: 0.2455\n","Epoch 4/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step - accuracy: 0.9631 - loss: 0.1118 - val_accuracy: 1.0000 - val_loss: 0.1609\n","Epoch 5/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9871 - loss: 0.1051 - val_accuracy: 1.0000 - val_loss: 0.1050\n","Epoch 6/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9908 - loss: 0.0475 - val_accuracy: 1.0000 - val_loss: 0.0726\n","Epoch 7/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9962 - loss: 0.0324 - val_accuracy: 1.0000 - val_loss: 0.0518\n","Epoch 8/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0214 - val_accuracy: 1.0000 - val_loss: 0.0373\n","Epoch 9/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9958 - loss: 0.0227 - val_accuracy: 1.0000 - val_loss: 0.0266\n","Epoch 10/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9990 - loss: 0.0182 - val_accuracy: 1.0000 - val_loss: 0.0189\n","Epoch 11/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9997 - loss: 0.0179 - val_accuracy: 1.0000 - val_loss: 0.0133\n","Epoch 12/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0112 - val_accuracy: 1.0000 - val_loss: 0.0089\n","Epoch 13/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9987 - loss: 0.0105 - val_accuracy: 1.0000 - val_loss: 0.0063\n","Epoch 14/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0100 - val_accuracy: 1.0000 - val_loss: 0.0045\n","Epoch 15/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9994 - loss: 0.0121 - val_accuracy: 1.0000 - val_loss: 0.0033\n","Epoch 16/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0097 - val_accuracy: 1.0000 - val_loss: 0.0024\n","Epoch 17/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0109 - val_accuracy: 1.0000 - val_loss: 0.0018\n","Epoch 18/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0067 - val_accuracy: 1.0000 - val_loss: 0.0013\n","Epoch 19/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0088 - val_accuracy: 1.0000 - val_loss: 9.3325e-04\n","Epoch 20/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9995 - loss: 0.0048 - val_accuracy: 1.0000 - val_loss: 6.9071e-04\n","Epoch 21/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9915 - loss: 0.0138 - val_accuracy: 1.0000 - val_loss: 4.9345e-04\n","Epoch 22/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0076 - val_accuracy: 1.0000 - val_loss: 3.6670e-04\n","Epoch 23/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0039 - val_accuracy: 1.0000 - val_loss: 2.7984e-04\n","Epoch 24/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0028 - val_accuracy: 1.0000 - val_loss: 2.1642e-04\n","Epoch 25/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9982 - loss: 0.0039 - val_accuracy: 1.0000 - val_loss: 1.7089e-04\n","Epoch 26/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0108 - val_accuracy: 1.0000 - val_loss: 1.2449e-04\n","Epoch 27/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0061 - val_accuracy: 1.0000 - val_loss: 9.5783e-05\n","Epoch 28/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 0.9991 - loss: 0.0065 - val_accuracy: 1.0000 - val_loss: 7.6599e-05\n","Epoch 29/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0030 - val_accuracy: 1.0000 - val_loss: 8.7013e-05\n","Epoch 30/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9979 - loss: 0.0111 - val_accuracy: 1.0000 - val_loss: 7.5816e-05\n","Epoch 31/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0062 - val_accuracy: 1.0000 - val_loss: 6.0093e-05\n","Epoch 32/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0077 - val_accuracy: 1.0000 - val_loss: 4.4215e-05\n","Epoch 33/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0025 - val_accuracy: 1.0000 - val_loss: 3.6924e-05\n","Epoch 34/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 0.9963 - loss: 0.0074 - val_accuracy: 1.0000 - val_loss: 2.7743e-05\n","Epoch 35/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step - accuracy: 1.0000 - loss: 0.0028 - val_accuracy: 1.0000 - val_loss: 2.3639e-05\n","Epoch 36/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0029 - val_accuracy: 1.0000 - val_loss: 2.1509e-05\n","Epoch 37/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0039 - val_accuracy: 1.0000 - val_loss: 1.9055e-05\n","Epoch 38/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 1.0000 - val_loss: 1.7189e-05\n","Epoch 39/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0020 - val_accuracy: 1.0000 - val_loss: 1.5862e-05\n","Epoch 40/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 1.0000 - val_loss: 1.5113e-05\n","Epoch 41/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0025 - val_accuracy: 1.0000 - val_loss: 1.3304e-05\n","Epoch 42/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0026 - val_accuracy: 1.0000 - val_loss: 1.1576e-05\n","Epoch 43/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 1.0000 - loss: 0.0017 - val_accuracy: 1.0000 - val_loss: 1.0252e-05\n","Epoch 44/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0013 - val_accuracy: 1.0000 - val_loss: 9.4912e-06\n","Epoch 45/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - accuracy: 1.0000 - loss: 0.0016 - val_accuracy: 1.0000 - val_loss: 8.8606e-06\n","Epoch 46/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.9931 - loss: 0.0139 - val_accuracy: 1.0000 - val_loss: 7.6435e-06\n","Epoch 47/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 5.0620e-04 - val_accuracy: 1.0000 - val_loss: 7.1727e-06\n","Epoch 48/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - accuracy: 1.0000 - loss: 0.0018 - val_accuracy: 1.0000 - val_loss: 6.8556e-06\n","Epoch 49/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 1.0000 - loss: 0.0026 - val_accuracy: 1.0000 - val_loss: 6.2131e-06\n","Epoch 50/50\n","\u001b[1m14/14\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step - accuracy: 0.9931 - loss: 0.0124 - val_accuracy: 1.0000 - val_loss: 5.3155e-06\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ Test Accuracy: 1.0000\n","\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 180ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00        34\n","           1       1.00      1.00      1.00        36\n","           2       1.00      1.00      1.00        30\n","\n","    accuracy                           1.00       100\n","   macro avg       1.00      1.00      1.00       100\n","weighted avg       1.00      1.00      1.00       100\n","\n","\n","Confusion Matrix:\n"," [[34  0  0]\n"," [ 0 36  0]\n"," [ 0  0 30]]\n"]}],"source":["\n","\n","# 2️⃣ Imports\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n","from imblearn.over_sampling import SMOTE\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.callbacks import EarlyStopping\n","import matplotlib.pyplot as plt\n","\n","# 3️⃣ Load dataset\n","# Replace with your file path or URL\n","from google.colab import drive\n","drive.mount('/content/drive')\n","df = pd.read_csv(\"/content/drive/My Drive/air/air_quality_dataset.csv\")\n","print(\"Dataset shape:\", df.shape)\n","print(df.head())\n","\n","# 4️⃣ Separate features and target\n","target_col = \"Source_Label\"\n","y = df[target_col]\n","\n","# Identify numeric vs categorical\n","numeric_features = [\"PM2.5\", \"PM10\", \"NOx\", \"NO2\", \"SO2\", \"VOCs\", \"CO\", \"CO2\", \"CH4\", \"Temperature\", \"Humidity\"]\n","categorical_features = [\"Wind_Direction\", \"Location_Type\"]\n","\n","X_numeric = df[numeric_features]\n","\n","# 5️⃣ Handle missing values\n","X_numeric = X_numeric.fillna(X_numeric.mean())\n","y = y.fillna(y.mode()[0])\n","\n","# 6️⃣ Encode categorical features\n","X_categorical = pd.get_dummies(df[categorical_features], drop_first=True)\n","\n","# 7️⃣ Combine numeric + categorical\n","X = pd.concat([X_numeric, X_categorical], axis=1)\n","\n","# 8️⃣ Encode target\n","le = LabelEncoder()\n","y = le.fit_transform(y)  # Converts to integers 0,1,2,...\n","\n","# 9️⃣ Train/test split\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y, test_size=0.2, random_state=42, stratify=y\n",")\n","\n","# 🔟 Balance training data with SMOTE\n","smote = SMOTE(random_state=42)\n","X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n","print(\"Class distribution after SMOTE:\", np.bincount(y_train_bal))\n","\n","# 1️⃣1️⃣ Scale numeric features\n","scaler = StandardScaler()\n","X_train_bal = scaler.fit_transform(X_train_bal)\n","X_test = scaler.transform(X_test)\n","\n","# 1️⃣2️⃣ Compute class weights\n","class_weights = compute_class_weight(\n","    class_weight=\"balanced\",\n","    classes=np.unique(y_train),\n","    y=y_train\n",")\n","cw = dict(enumerate(class_weights))\n","print(\"Class weights:\", cw)\n","\n","# 1️⃣3️⃣ Define custom NN\n","model = Sequential([\n","    Dense(128, activation=\"relu\", input_shape=(X_train_bal.shape[1],)),\n","    BatchNormalization(),\n","    Dropout(0.4),\n","\n","    Dense(64, activation=\"relu\"),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(32, activation=\"relu\"),\n","    Dropout(0.2),\n","\n","    Dense(len(np.unique(y)), activation=\"softmax\")  # multi-class output\n","])\n","\n","# 1️⃣4️⃣ Compile model\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n","    loss=\"sparse_categorical_crossentropy\",\n","    metrics=[\"accuracy\"]\n",")\n","\n","# 1️⃣5️⃣ Early stopping\n","early_stop = EarlyStopping(\n","    monitor=\"val_loss\",\n","    patience=8,\n","    restore_best_weights=True\n",")\n","\n","# 1️⃣6️⃣ Train model\n","history = model.fit(\n","    X_train_bal, y_train_bal,\n","    validation_data=(X_test, y_test),\n","    epochs=50,\n","    batch_size=32,\n","    class_weight=cw,\n","    callbacks=[early_stop],\n","    verbose=1\n",")\n","\n","# 1️⃣7️⃣ Plot training curves\n","plt.plot(history.history[\"accuracy\"], label=\"Train Accuracy\")\n","plt.plot(history.history[\"val_accuracy\"], label=\"Validation Accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.title(\"Training vs Validation Accuracy\")\n","plt.show()\n","\n","# 1️⃣8️⃣ Evaluate\n","loss, acc = model.evaluate(X_test, y_test, verbose=0)\n","print(f\"\\n✅ Test Accuracy: {acc:.4f}\")\n","\n","y_pred = np.argmax(model.predict(X_test), axis=1)\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n","print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n"]}]}