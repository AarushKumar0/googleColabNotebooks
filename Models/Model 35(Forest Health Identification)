{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOwqnmfMh3Aj7EkrIK54n9+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"L2OsOHATwjML","executionInfo":{"status":"ok","timestamp":1756587571600,"user_tz":240,"elapsed":29518,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"34f9e312-6c08-44cc-d65e-3c9ac50b11d8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Dataset shape: (1000, 20)\n","   Plot_ID   Latitude   Longitude        DBH  Tree_Height  \\\n","0        1  24.981605 -117.040695  29.862040    20.835684   \n","1        2  48.028572  -92.066934  28.462986    24.307079   \n","2        3  39.279758  -68.893791  91.094185     9.013101   \n","3        4  33.946339  -78.744258  28.706889    19.496475   \n","4        5  16.240746  -73.540720  30.835224    18.008888   \n","\n","   Crown_Width_North_South  Crown_Width_East_West      Slope    Elevation  \\\n","0                 6.147963               4.542720  29.171563   212.518419   \n","1                 8.248891               5.260921   7.757386   641.640332   \n","2                 7.841448               8.690927  39.257755  2510.612835   \n","3                 2.385099               4.060039  27.590231  2323.628233   \n","4                 2.343245               8.826847   7.074175  1116.863805   \n","\n","   Temperature   Humidity   Soil_TN   Soil_TP   Soil_AP   Soil_AN  \\\n","0    30.209377  93.086241  0.379904  0.268850  0.328882  0.487287   \n","1    29.054905  62.028839  0.339583  0.073260  0.044616  0.013501   \n","2     8.351397  77.992822  0.184392  0.297665  0.124953  0.474088   \n","3    37.290034  54.883864  0.611194  0.160819  0.387971  0.187495   \n","4    24.896527  70.402766  0.481858  0.030913  0.266699  0.009995   \n","\n","   Menhinick_Index  Gleason_Index  Disturbance_Level  Fire_Risk_Index  \\\n","0         0.682938       2.998681           0.004402         0.812948   \n","1         0.723696       3.986987           0.000330         0.678542   \n","2         2.129934       3.250667           0.472263         0.889075   \n","3         1.717352       1.333210           0.029294         0.449336   \n","4         2.476038       1.742321           0.974533         0.893890   \n","\n","  Health_Status  \n","0       Healthy  \n","1  Very Healthy  \n","2       Healthy  \n","3     Unhealthy  \n","4     Unhealthy  \n","Classes: ['Healthy' 'Sub-healthy' 'Unhealthy' 'Very Healthy']\n","Class distribution after SMOTE: [353 353 353 353]\n","Class weights: {0: np.float64(0.56657223796034), 1: np.float64(3.076923076923077), 2: np.float64(0.7782101167315175), 3: np.float64(1.6)}\n","Epoch 1/50\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.12/dist-packages/keras/src/layers/core/dense.py:93: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 67ms/step - accuracy: 0.2953 - loss: 2.3728 - val_accuracy: 0.2550 - val_loss: 1.4267\n","Epoch 2/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 4ms/step - accuracy: 0.4652 - loss: 1.4740 - val_accuracy: 0.3000 - val_loss: 1.4326\n","Epoch 3/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5345 - loss: 1.0927 - val_accuracy: 0.3250 - val_loss: 1.3990\n","Epoch 4/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5999 - loss: 0.9517 - val_accuracy: 0.3500 - val_loss: 1.3125\n","Epoch 5/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6367 - loss: 0.8146 - val_accuracy: 0.4200 - val_loss: 1.2307\n","Epoch 6/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6344 - loss: 0.8053 - val_accuracy: 0.4600 - val_loss: 1.1750\n","Epoch 7/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6653 - loss: 0.7146 - val_accuracy: 0.4950 - val_loss: 1.1366\n","Epoch 8/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.6990 - loss: 0.6251 - val_accuracy: 0.5300 - val_loss: 1.0896\n","Epoch 9/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.7065 - loss: 0.6450 - val_accuracy: 0.5200 - val_loss: 1.0665\n","Epoch 10/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.7149 - loss: 0.5559 - val_accuracy: 0.5850 - val_loss: 0.9831\n","Epoch 11/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.7359 - loss: 0.5908 - val_accuracy: 0.5850 - val_loss: 0.9491\n","Epoch 12/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.7491 - loss: 0.5279 - val_accuracy: 0.6150 - val_loss: 0.8986\n","Epoch 13/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.7648 - loss: 0.4647 - val_accuracy: 0.6300 - val_loss: 0.8716\n","Epoch 14/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 7ms/step - accuracy: 0.7608 - loss: 0.4691 - val_accuracy: 0.6350 - val_loss: 0.8972\n","Epoch 15/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - accuracy: 0.7965 - loss: 0.4474 - val_accuracy: 0.6250 - val_loss: 0.8657\n","Epoch 16/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.7641 - loss: 0.4227 - val_accuracy: 0.6850 - val_loss: 0.7748\n","Epoch 17/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7906 - loss: 0.4197 - val_accuracy: 0.6700 - val_loss: 0.8119\n","Epoch 18/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7977 - loss: 0.4076 - val_accuracy: 0.6850 - val_loss: 0.7545\n","Epoch 19/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7978 - loss: 0.3932 - val_accuracy: 0.6900 - val_loss: 0.7481\n","Epoch 20/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8072 - loss: 0.4024 - val_accuracy: 0.6950 - val_loss: 0.7485\n","Epoch 21/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.7839 - loss: 0.3942 - val_accuracy: 0.6800 - val_loss: 0.7720\n","Epoch 22/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8080 - loss: 0.3760 - val_accuracy: 0.7050 - val_loss: 0.7419\n","Epoch 23/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8128 - loss: 0.3546 - val_accuracy: 0.7000 - val_loss: 0.7104\n","Epoch 24/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8146 - loss: 0.3730 - val_accuracy: 0.7050 - val_loss: 0.7148\n","Epoch 25/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8198 - loss: 0.3389 - val_accuracy: 0.7150 - val_loss: 0.6862\n","Epoch 26/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8457 - loss: 0.3549 - val_accuracy: 0.7250 - val_loss: 0.6678\n","Epoch 27/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8337 - loss: 0.3214 - val_accuracy: 0.7100 - val_loss: 0.6616\n","Epoch 28/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8276 - loss: 0.3516 - val_accuracy: 0.7100 - val_loss: 0.6676\n","Epoch 29/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8362 - loss: 0.3244 - val_accuracy: 0.7250 - val_loss: 0.6833\n","Epoch 30/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8364 - loss: 0.3066 - val_accuracy: 0.7250 - val_loss: 0.6696\n","Epoch 31/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8329 - loss: 0.3282 - val_accuracy: 0.7250 - val_loss: 0.6889\n","Epoch 32/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8415 - loss: 0.3393 - val_accuracy: 0.7300 - val_loss: 0.6707\n","Epoch 33/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8444 - loss: 0.2995 - val_accuracy: 0.7450 - val_loss: 0.6262\n","Epoch 34/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8505 - loss: 0.2830 - val_accuracy: 0.7450 - val_loss: 0.6113\n","Epoch 35/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8614 - loss: 0.2799 - val_accuracy: 0.7400 - val_loss: 0.6304\n","Epoch 36/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8269 - loss: 0.3151 - val_accuracy: 0.7200 - val_loss: 0.6924\n","Epoch 37/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8399 - loss: 0.3208 - val_accuracy: 0.7200 - val_loss: 0.6249\n","Epoch 38/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8558 - loss: 0.2739 - val_accuracy: 0.7300 - val_loss: 0.6219\n","Epoch 39/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8636 - loss: 0.2458 - val_accuracy: 0.7300 - val_loss: 0.6160\n","Epoch 40/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8622 - loss: 0.3528 - val_accuracy: 0.7500 - val_loss: 0.6124\n","Epoch 41/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8575 - loss: 0.2826 - val_accuracy: 0.7250 - val_loss: 0.5954\n","Epoch 42/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8763 - loss: 0.2445 - val_accuracy: 0.7450 - val_loss: 0.5924\n","Epoch 43/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8538 - loss: 0.2875 - val_accuracy: 0.7300 - val_loss: 0.6360\n","Epoch 44/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8537 - loss: 0.2851 - val_accuracy: 0.7350 - val_loss: 0.7127\n","Epoch 45/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8286 - loss: 0.2853 - val_accuracy: 0.7250 - val_loss: 0.6660\n","Epoch 46/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8643 - loss: 0.2551 - val_accuracy: 0.7600 - val_loss: 0.5828\n","Epoch 47/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8744 - loss: 0.2613 - val_accuracy: 0.7650 - val_loss: 0.5905\n","Epoch 48/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8750 - loss: 0.2556 - val_accuracy: 0.7550 - val_loss: 0.5990\n","Epoch 49/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.8691 - loss: 0.2615 - val_accuracy: 0.7350 - val_loss: 0.5736\n","Epoch 50/50\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.8605 - loss: 0.2911 - val_accuracy: 0.7450 - val_loss: 0.5692\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","✅ Test Accuracy: 0.7450\n","\u001b[1m7/7\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 70ms/step\n","\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","     Healthy       0.93      0.58      0.71        88\n"," Sub-healthy       0.46      0.81      0.59        16\n","   Unhealthy       0.74      0.89      0.81        65\n","Very Healthy       0.69      0.87      0.77        31\n","\n","    accuracy                           0.74       200\n","   macro avg       0.71      0.79      0.72       200\n","weighted avg       0.79      0.74      0.74       200\n","\n","\n","Confusion Matrix:\n"," [[51 11 15 11]\n"," [ 0 13  3  0]\n"," [ 2  4 58  1]\n"," [ 2  0  2 27]]\n"]}],"source":["# 1️⃣ Imports\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","from imblearn.over_sampling import SMOTE\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import classification_report, confusion_matrix\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.callbacks import EarlyStopping\n","import matplotlib.pyplot as plt\n","\n","# 2️⃣ Load dataset\n","from google.colab import drive\n","drive.mount('/content/drive')\n","df = pd.read_csv(\"/content/drive/My Drive/forestHealth/forest_health_data_with_target.csv\")\n","print(\"Dataset shape:\", df.shape)\n","print(df.head())\n","\n","# 3️⃣ Features & target\n","target_col = \"Health_Status\"\n","y = df[target_col]\n","\n","# Numeric features\n","numeric_features = [\n","    \"Latitude\",\"Longitude\",\"DBH\",\"Tree_Height\",\"Crown_Width_North_South\",\n","    \"Crown_Width_East_West\",\"Slope\",\"Elevation\",\"Temperature\",\"Humidity\",\n","    \"Soil_TN\",\"Soil_TP\",\"Soil_AP\",\"Soil_AN\",\"Menhinick_Index\",\"Gleason_Index\",\n","    \"Fire_Risk_Index\"\n","]\n","\n","# Categorical features\n","categorical_features = [\"Disturbance_Level\"]\n","\n","# Split numeric and categorical\n","X_numeric = df[numeric_features]\n","X_categorical = pd.get_dummies(df[categorical_features], drop_first=True)\n","\n","# Combine\n","X = pd.concat([X_numeric, X_categorical], axis=1)\n","\n","# 4️⃣ Handle missing values\n","X = X.fillna(X.mean())\n","y = y.fillna(y.mode()[0])\n","\n","# 5️⃣ Encode target (multiclass)\n","le = LabelEncoder()\n","y_encoded = le.fit_transform(y)\n","print(\"Classes:\", le.classes_)\n","\n","# 6️⃣ Train/test split\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded\n",")\n","\n","# 7️⃣ Balance classes with SMOTE\n","smote = SMOTE(random_state=42)\n","X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n","print(\"Class distribution after SMOTE:\", np.bincount(y_train_bal))\n","\n","# 8️⃣ Scale features\n","scaler = StandardScaler()\n","X_train_bal = scaler.fit_transform(X_train_bal)\n","X_test = scaler.transform(X_test)\n","\n","# 9️⃣ Compute class weights (optional if using SMOTE)\n","class_weights = compute_class_weight(\n","    class_weight=\"balanced\",\n","    classes=np.unique(y_train),\n","    y=y_train\n",")\n","cw = dict(enumerate(class_weights))\n","print(\"Class weights:\", cw)\n","\n","# 🔟 Build custom neural network\n","model = Sequential([\n","    Dense(128, activation=\"relu\", input_shape=(X_train_bal.shape[1],)),\n","    BatchNormalization(),\n","    Dropout(0.4),\n","\n","    Dense(64, activation=\"relu\"),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(32, activation=\"relu\"),\n","    Dropout(0.2),\n","\n","    Dense(len(le.classes_), activation=\"softmax\")  # Multiclass output\n","])\n","\n","# 1️⃣1️⃣ Compile model\n","model.compile(\n","    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n","    loss=\"sparse_categorical_crossentropy\",  # Multiclass\n","    metrics=[\"accuracy\"]\n",")\n","\n","# 1️⃣2️⃣ Early stopping\n","early_stop = EarlyStopping(\n","    monitor=\"val_loss\",\n","    patience=8,\n","    restore_best_weights=True\n",")\n","\n","# 1️⃣3️⃣ Train model\n","history = model.fit(\n","    X_train_bal, y_train_bal,\n","    validation_data=(X_test, y_test),\n","    epochs=50,\n","    batch_size=32,\n","    class_weight=cw,\n","    callbacks=[early_stop],\n","    verbose=1\n",")\n","\n","# 1️⃣4️⃣ Plot training curves\n","plt.plot(history.history[\"accuracy\"], label=\"Train Accuracy\")\n","plt.plot(history.history[\"val_accuracy\"], label=\"Validation Accuracy\")\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend()\n","plt.title(\"Training vs Validation Accuracy\")\n","plt.show()\n","\n","# 1️⃣5️⃣ Evaluate model\n","loss, acc = model.evaluate(X_test, y_test, verbose=0)\n","print(f\"\\n✅ Test Accuracy: {acc:.4f}\")\n","\n","# 1️⃣6️⃣ Classification report & confusion matrix\n","y_pred = np.argmax(model.predict(X_test), axis=1)\n","print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred, target_names=le.classes_))\n","print(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n","\n"]}]}