{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"1gfhGmJiuv8vtK9dvEt9vB_V25a6dxDDt"},"id":"5o0LQbAKGjQ0","outputId":"bcfbef18-10bb-48c7-8396-79c0b6537f0a"},"outputs":[],"source":["# ---------------------------\n","# 0️⃣ Mount Google Drive (Colab only)\n","# ---------------------------\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# ---------------------------\n","# 1️⃣ Imports \u0026 Config\n","# ---------------------------\n","import os\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import (Conv2D, MaxPooling2D, Flatten, Dense,\n","                                     Dropout, BatchNormalization, GlobalAveragePooling2D)\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\n","\n","# Paths\n","BASE_DIR = \"/content/drive/My Drive/realFakeImage/rvf10k\"  # change to your path\n","TRAIN_DIR = os.path.join(BASE_DIR, \"train\")\n","VALID_DIR = os.path.join(BASE_DIR, \"valid\")\n","\n","# Hyperparameters\n","IMG_SIZE = (128, 128)  # (width, height)\n","BATCH_SIZE = 32\n","EPOCHS = 25\n","\n","# ---------------------------\n","# 2️⃣ ImageDataGenerators\n","# ---------------------------\n","train_gen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=5,\n","    width_shift_range=0.05,\n","    height_shift_range=0.05,\n","    shear_range=0.02,\n","    zoom_range=0.05,\n","    horizontal_flip=True,\n","    fill_mode='nearest'\n",")\n","\n","val_gen = ImageDataGenerator(rescale=1./255)\n","\n","# Flow images from directories\n","train_flow = train_gen.flow_from_directory(\n","    TRAIN_DIR,\n","    target_size=IMG_SIZE,\n","    batch_size=BATCH_SIZE,\n","    class_mode='binary',\n","    shuffle=True\n",")\n","\n","val_flow = val_gen.flow_from_directory(\n","    VALID_DIR,\n","    target_size=IMG_SIZE,\n","    batch_size=BATCH_SIZE,\n","    class_mode='binary',\n","    shuffle=False\n",")\n","\n","# ---------------------------\n","# 3️⃣ Custom CNN model\n","# ---------------------------\n","def build_custom_cnn(input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)):\n","    model = Sequential([\n","        Conv2D(32, (3,3), activation='relu', padding='same', input_shape=input_shape),\n","        BatchNormalization(),\n","        Conv2D(32, (3,3), activation='relu', padding='same'),\n","        BatchNormalization(),\n","        MaxPooling2D(2,2),\n","        Dropout(0.25),\n","\n","        Conv2D(64, (3,3), activation='relu', padding='same'),\n","        BatchNormalization(),\n","        Conv2D(64, (3,3), activation='relu', padding='same'),\n","        BatchNormalization(),\n","        MaxPooling2D(2,2),\n","        Dropout(0.3),\n","\n","        Conv2D(128, (3,3), activation='relu', padding='same'),\n","        BatchNormalization(),\n","        Conv2D(128, (3,3), activation='relu', padding='same'),\n","        BatchNormalization(),\n","        MaxPooling2D(2,2),\n","        Dropout(0.4),\n","\n","        GlobalAveragePooling2D(),\n","        Dense(256, activation='relu'),\n","        Dropout(0.5),\n","        Dense(1, activation='sigmoid')  # binary classification\n","    ])\n","    return model\n","\n","model = build_custom_cnn()\n","model.compile(optimizer=tf.keras.optimizers.Adam(1e-4),\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","model.summary()\n","\n","# ---------------------------\n","# 4️⃣ Callbacks \u0026 Train\n","# ---------------------------\n","checkpoint = ModelCheckpoint(\"rvf_cnn_best.h5\", monitor=\"val_accuracy\", save_best_only=True, verbose=1)\n","earlystop = EarlyStopping(monitor=\"val_loss\", patience=5, restore_best_weights=True, verbose=1)\n","reduce_lr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=3, verbose=1)\n","\n","history = model.fit(\n","    train_flow,\n","    validation_data=val_flow,\n","    epochs=EPOCHS,\n","    callbacks=[checkpoint, earlystop, reduce_lr]\n",")\n","\n","# ---------------------------\n","# 5️⃣ Evaluate on validation set\n","# ---------------------------\n","res = model.evaluate(val_flow, verbose=1)\n","print(\"Validation loss, acc:\", res)\n","\n","# Optional: Confusion matrix\n","import sklearn.metrics as skm\n","\n","y_true = val_flow.classes\n","y_pred_probs = model.predict(val_flow, verbose=1)\n","y_pred = (y_pred_probs \u003e 0.5).astype(int).flatten()\n","\n","cm = skm.confusion_matrix(y_true, y_pred)\n","acc = skm.accuracy_score(y_true, y_pred)\n","print(\"Validation accuracy:\", acc)\n","\n","# Optional: Plot a few misclassified images\n","inv_map = {v:k for k,v in train_flow.class_indices.items()}\n","err_idx = np.where(y_true != y_pred)[0]\n","for i in err_idx[:10]:\n","    img_path = val_flow.filepaths[i]\n","    true_label = inv_map[y_true[i]]\n","    pred_label = inv_map[y_pred[i]]\n","    img = plt.imread(img_path)\n","    plt.imshow(img)\n","    plt.title(f\"True: {true_label}, Pred: {pred_label}\")\n","    plt.axis('off')\n","    plt.show()\n"]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyOPCrn4ifqEfK8L+qYn5ryq","gpuType":"T4","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}