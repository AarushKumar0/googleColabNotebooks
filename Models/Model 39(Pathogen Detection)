{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyO8u87dSK4/okcyJnayE+w6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j1CM9V5hC9OA","executionInfo":{"status":"ok","timestamp":1759377194986,"user_tz":240,"elapsed":41870,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"a7d975fa-0a9c-4de7-d3c9-5c8f5babd668"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import classification_report, confusion_matrix\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout, BatchNormalization\n","from tensorflow.keras.utils import to_categorical\n","\n","# -----------------------\n","# 1. Load and clean dataset\n","# -----------------------\n","df = pd.read_csv(\"/content/drive/My Drive/pathogen/pathogen.csv\")\n","df.columns = df.columns.str.strip()  # Remove trailing spaces\n","\n","# Fill only categorical columns to avoid FutureWarning\n","categorical_cols = [\"Serovar\", \"SNP cluster\", \"Isolation source\", \"Location\", \"AMR genotypes\"]\n","df[categorical_cols] = df[categorical_cols].fillna(\"Unknown\")\n","\n","# Target column\n","y = df[\"Serovar\"]\n","\n","# Encode target labels\n","label_encoder = LabelEncoder()\n","y_encoded = label_encoder.fit_transform(y)\n","y_onehot = to_categorical(y_encoded)\n","\n","# -----------------------\n","# 2. Feature extraction\n","# -----------------------\n","# Parse AMR genotypes\n","def parse_amr(row):\n","    if row == \"Unknown\":\n","        return []\n","    return [g.split(\"=\")[0] for g in row.split(\",\")]\n","\n","df[\"AMR list\"] = df[\"AMR genotypes\"].apply(parse_amr)\n","\n","# Create AMR binary features in one step (avoid DataFrame fragmentation)\n","all_genes = sorted(set(g for genes in df[\"AMR list\"] for g in genes))\n","amr_df = pd.DataFrame([{g: int(g in genes) for g in all_genes} for genes in df[\"AMR list\"]])\n","df = pd.concat([df, amr_df], axis=1)\n","\n","# Select features: AMR genes + categorical metadata\n","feature_cols = all_genes + [\"SNP cluster\", \"Isolation source\", \"Location\"]\n","X = df[feature_cols].copy()\n","\n","# One-hot encode categorical columns\n","X = pd.get_dummies(X, columns=[\"SNP cluster\", \"Isolation source\", \"Location\"], dummy_na=True)\n","\n","# -----------------------\n","# 3. Train/test split\n","# -----------------------\n","X_train, X_test, y_train, y_test = train_test_split(\n","    X, y_onehot, test_size=0.2, random_state=42, stratify=y_encoded\n",")\n","\n","# -----------------------\n","# 4. Compute class weights\n","# -----------------------\n","class_weights_values = compute_class_weight(\n","    class_weight=\"balanced\",\n","    classes=np.unique(y_encoded),\n","    y=y_encoded\n",")\n","class_weights = dict(enumerate(class_weights_values))\n","\n","# -----------------------\n","# 5. Build Keras model\n","# -----------------------\n","model = Sequential([\n","    Dense(256, activation=\"relu\", input_shape=(X_train.shape[1],)),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(128, activation=\"relu\"),\n","    BatchNormalization(),\n","    Dropout(0.3),\n","\n","    Dense(y_onehot.shape[1], activation=\"softmax\")  # Output = number of serovars\n","])\n","\n","model.compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])\n","\n","# -----------------------\n","# 6. Train model\n","# -----------------------\n","history = model.fit(\n","    X_train, y_train,\n","    validation_split=0.2,\n","    epochs=20,\n","    batch_size=64,\n","    class_weight=class_weights\n",")\n","\n","# -----------------------\n","# 7. Evaluate model\n","# -----------------------\n","loss, acc = model.evaluate(X_test, y_test)\n","print(f\"Test Accuracy: {acc:.4f}\")\n","\n","preds = model.predict(X_test)\n","y_true = label_encoder.inverse_transform(np.argmax(y_test, axis=1))\n","y_pred = label_encoder.inverse_transform(np.argmax(preds, axis=1))\n","\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_true, y_pred))\n","\n","print(\"\\nConfusion Matrix:\")\n","print(confusion_matrix(y_true, y_pred))\n","\n","# -----------------------\n","# 8. Save model for later\n","# -----------------------\n","model.save(\"serovar_predictor.h5\")\n","\n","# -----------------------\n","# 9. Predict new isolate (example)\n","# -----------------------\n","def predict_serovar(isolate_dict):\n","    \"\"\"\n","    isolate_dict = dictionary with keys: AMR genes + 'SNP cluster', 'Isolation source', 'Location'\n","    Example:\n","    {\n","        \"mdsA\": 1, \"mdsB\": 1, \"blaTEM-1\": 1, \"catA1\": 1,\n","        \"SNP cluster\": \"PDS000032687.2\",\n","        \"Isolation source\": \"environmental/other\",\n","        \"Location\": \"USA\"\n","    }\n","    \"\"\"\n","    row = pd.DataFrame([isolate_dict])\n","\n","    # Add missing AMR genes with 0\n","    for g in all_genes:\n","        if g not in row.columns:\n","            row[g] = 0\n","\n","    # One-hot encode categoricals\n","    row = pd.get_dummies(row)\n","\n","    # Align with training columns\n","    row = row.reindex(columns=X_train.columns, fill_value=0)\n","\n","    pred = model.predict(row)\n","    pred_class = label_encoder.inverse_transform([np.argmax(pred)])\n","    return pred_class[0]\n","\n","# Example usage\n","example_isolate = {\n","    \"mdsA\": 1, \"mdsB\": 1, \"blaTEM-1\": 1, \"catA1\": 1,\n","    \"SNP cluster\": \"PDS000032687.2\",\n","    \"Isolation source\": \"environmental/other\",\n","    \"Location\": \"USA\"\n","}\n","print(\"Predicted Serovar:\", predict_serovar(example_isolate))\n"],"metadata":{"id":"BKxUxQHwEadQ"},"execution_count":null,"outputs":[]}]}