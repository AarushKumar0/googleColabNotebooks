{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMS8te+fGmhrulJdA60ZU5e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping\n","\n","\n","df = pd.read_csv('/content/drive/My Drive/cars/carPrice/CarPrice_Assignment.csv')\n","\n","X = df.drop(columns=['price', 'car_ID', 'CarName'])\n","y = df['price']\n","\n","num_features = X.select_dtypes(include=['int64', 'float64']).columns.tolist()\n","cat_features = X.select_dtypes(include=['object']).columns.tolist()\n","\n","preprocessor = ColumnTransformer([\n","    ('num', StandardScaler(), num_features),\n","    ('cat', OneHotEncoder(handle_unknown='ignore'), cat_features)\n","])\n","\n","X_processed = preprocessor.fit_transform(X)\n","\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_processed, y.values, test_size=0.2, random_state=42)\n","\n","rf = RandomForestRegressor(n_estimators=100, random_state=42)\n","rf.fit(X_train, y_train)\n","\n","rf_train_preds = rf.predict(X_train).reshape(-1, 1)\n","rf_val_preds = rf.predict(X_val).reshape(-1, 1)\n","\n","X_train_hybrid = np.hstack([X_train.toarray() if hasattr(X_train, \"toarray\") else X_train, rf_train_preds])\n","X_val_hybrid = np.hstack([X_val.toarray() if hasattr(X_val, \"toarray\") else X_val, rf_val_preds])\n","\n","model = Sequential([\n","    Dense(128, activation='relu', input_shape=(X_train_hybrid.shape[1],)),\n","    Dropout(0.2),\n","    Dense(64, activation='relu'),\n","    Dropout(0.2),\n","    Dense(1)\n","])\n","\n","model.compile(optimizer='adam', loss='mse', metrics=['mae'])\n","\n","es = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n","model.fit(X_train_hybrid, y_train, validation_data=(X_val_hybrid, y_val),\n","          epochs=100, batch_size=8, callbacks=[es])\n","\n","val_preds = model.predict(X_val_hybrid).flatten()\n","\n","mae = np.mean(np.abs(val_preds - y_val))\n","rmse = np.sqrt(np.mean((val_preds - y_val)**2))\n","r2 = 1 - np.sum((val_preds - y_val)**2) / np.sum((y_val - np.mean(y_val))**2)\n","\n","print(f'Validation MAE: {mae:.2f}')\n","print(f'Validation RMSE: {rmse:.2f}')\n","print(f'Validation R²: {r2:.3f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z4mJNxYRPMDf","executionInfo":{"status":"ok","timestamp":1751662812533,"user_tz":240,"elapsed":9065,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"b754cdae-d558-4ecd-894d-13fe4121244b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 83ms/step - loss: 151564528.0000 - mae: 10667.4023 - val_loss: 52520860.0000 - val_mae: 5872.4487\n","Epoch 2/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 31718546.0000 - mae: 4538.7959 - val_loss: 3819188.2500 - val_mae: 1398.1699\n","Epoch 3/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8205461.5000 - mae: 1953.7379 - val_loss: 3676040.2500 - val_mae: 1353.4983\n","Epoch 4/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 6234218.5000 - mae: 1830.3876 - val_loss: 3636030.7500 - val_mae: 1341.6490\n","Epoch 5/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 5759605.5000 - mae: 1845.0972 - val_loss: 3552562.2500 - val_mae: 1306.5021\n","Epoch 6/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 4507666.0000 - mae: 1601.2681 - val_loss: 3365264.0000 - val_mae: 1287.8154\n","Epoch 7/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 7476437.5000 - mae: 1878.5901 - val_loss: 3308937.0000 - val_mae: 1274.8270\n","Epoch 8/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 8543662.0000 - mae: 1991.1326 - val_loss: 3309780.0000 - val_mae: 1274.8848\n","Epoch 9/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 9673868.0000 - mae: 2054.6072 - val_loss: 3549145.0000 - val_mae: 1316.0339\n","Epoch 10/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 6436300.0000 - mae: 1716.4296 - val_loss: 4162752.0000 - val_mae: 1368.3148\n","Epoch 11/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 5672825.0000 - mae: 1519.4298 - val_loss: 3809321.7500 - val_mae: 1395.0868\n","Epoch 12/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 5171450.5000 - mae: 1667.1088 - val_loss: 3354449.5000 - val_mae: 1287.3939\n","Epoch 13/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 4675162.0000 - mae: 1621.8951 - val_loss: 3993562.5000 - val_mae: 1347.9595\n","Epoch 14/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 8253758.5000 - mae: 1750.9695 - val_loss: 3318063.2500 - val_mae: 1277.3014\n","Epoch 15/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 7258360.0000 - mae: 1868.2162 - val_loss: 3321913.2500 - val_mae: 1281.4733\n","Epoch 16/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 4685116.5000 - mae: 1551.8395 - val_loss: 3309666.0000 - val_mae: 1274.9663\n","Epoch 17/100\n","\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3680618.2500 - mae: 1404.2325 - val_loss: 3338519.7500 - val_mae: 1284.9417\n","\u001b[1m1/2\u001b[0m \u001b[32m━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 153ms/step"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 263 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7fca5a11f600> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m2/2\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 163ms/step\n","Validation MAE: 1274.83\n","Validation RMSE: 1819.05\n","Validation R²: 0.958\n"]}]}]}