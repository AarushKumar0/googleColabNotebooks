{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPLgZGrrCwDOwq/6OXRim6V"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mfhmVhGUcRoP","executionInfo":{"status":"ok","timestamp":1752540790670,"user_tz":240,"elapsed":19153,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"12c008d4-db5c-47d3-f801-eafc497266f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler, OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","import tensorflow as tf\n","from tensorflow.keras import layers, models, Input\n","from tensorflow.keras.callbacks import EarlyStopping\n","file_path = '/content/drive/My Drive/mushroom/mushroom.csv'\n","df = pd.read_csv(file_path)\n"],"metadata":{"id":"4h84PvsOc1Ur"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for col in df.columns:\n","    unique_vals = df[col].dropna().unique()\n","    print(f\"Column: {col}\")\n","    print(f\"Unique values ({len(unique_vals)}): {unique_vals}\\n\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gVpo8TdzklyQ","executionInfo":{"status":"ok","timestamp":1752540800574,"user_tz":240,"elapsed":166,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"2bed7067-31bc-4070-965d-719569f70d8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Column: class\n","Unique values (2): ['p' 'e']\n","\n","Column: cap-diameter\n","Unique values (2571): [15.26 16.6  14.07 ... 22.85 21.8  20.42]\n","\n","Column: cap-shape\n","Unique values (7): ['x' 'f' 'p' 'b' 'c' 's' 'o']\n","\n","Column: cap-surface\n","Unique values (11): ['g' 'h' 't' 'y' 'e' 's' 'l' 'd' 'w' 'i' 'k']\n","\n","Column: cap-color\n","Unique values (12): ['o' 'e' 'n' 'g' 'r' 'w' 'y' 'p' 'u' 'b' 'l' 'k']\n","\n","Column: does-bruise-or-bleed\n","Unique values (2): ['f' 't']\n","\n","Column: gill-attachment\n","Unique values (7): ['e' 'a' 'd' 's' 'x' 'p' 'f']\n","\n","Column: gill-spacing\n","Unique values (3): ['c' 'd' 'f']\n","\n","Column: gill-color\n","Unique values (12): ['w' 'n' 'p' 'u' 'b' 'g' 'y' 'r' 'e' 'o' 'k' 'f']\n","\n","Column: stem-height\n","Unique values (2226): [16.95 17.99 17.8  ...  1.23  1.16  0.  ]\n","\n","Column: stem-width\n","Unique values (4630): [17.09 18.19 17.74 ... 32.59 30.99 30.51]\n","\n","Column: stem-root\n","Unique values (5): ['s' 'b' 'r' 'c' 'f']\n","\n","Column: stem-surface\n","Unique values (8): ['y' 's' 'k' 'i' 'h' 't' 'g' 'f']\n","\n","Column: stem-color\n","Unique values (13): ['w' 'y' 'n' 'u' 'b' 'l' 'r' 'p' 'e' 'k' 'g' 'o' 'f']\n","\n","Column: veil-type\n","Unique values (1): ['u']\n","\n","Column: veil-color\n","Unique values (6): ['w' 'y' 'n' 'e' 'u' 'k']\n","\n","Column: has-ring\n","Unique values (2): ['t' 'f']\n","\n","Column: ring-type\n","Unique values (8): ['g' 'p' 'e' 'l' 'f' 'm' 'r' 'z']\n","\n","Column: spore-print-color\n","Unique values (7): ['w' 'p' 'k' 'r' 'u' 'n' 'g']\n","\n","Column: habitat\n","Unique values (8): ['d' 'm' 'g' 'h' 'l' 'p' 'w' 'u']\n","\n","Column: season\n","Unique values (4): ['w' 'u' 'a' 's']\n","\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import OneHotEncoder, StandardScaler\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import Pipeline\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout\n","\n","df = df.drop(columns=['veil-type'])\n","\n","X = df.drop(columns=['class'])\n","y = df['class'].map({'e':0, 'p':1})\n","\n","\n","numeric_features = ['cap-diameter', 'stem-height', 'stem-width']\n","categorical_features = [col for col in X.columns if col not in numeric_features]\n","\n","numeric_transformer = StandardScaler()\n","categorical_transformer = OneHotEncoder(handle_unknown='ignore')\n","\n","preprocessor = ColumnTransformer(\n","    transformers=[\n","        ('num', numeric_transformer, numeric_features),\n","        ('cat', categorical_transformer, categorical_features)\n","    ])\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n","\n","X_train_processed = preprocessor.fit_transform(X_train)\n","X_test_processed = preprocessor.transform(X_test)\n","\n","model = Sequential([\n","    Dense(128, activation='relu', input_shape=(X_train_processed.shape[1],)),\n","    Dropout(0.3),\n","    Dense(64, activation='relu'),\n","    Dropout(0.3),\n","    Dense(1, activation='sigmoid')\n","])\n","\n","model.compile(optimizer='adam',\n","              loss='binary_crossentropy',\n","              metrics=['accuracy'])\n","\n","history = model.fit(X_train_processed, y_train,\n","                    epochs=30,\n","                    batch_size=32,\n","                    validation_split=0.2,\n","                    verbose=2)\n","\n","\n","test_loss, test_acc = model.evaluate(X_test_processed, y_test, verbose=0)\n","print(f'Test Accuracy: {test_acc:.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u7pBbAHKkxEQ","executionInfo":{"status":"ok","timestamp":1752540994694,"user_tz":240,"elapsed":148950,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"60329943-86ff-42da-ebcc-bdef947bc6c5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","1222/1222 - 11s - 9ms/step - accuracy: 0.9374 - loss: 0.1463 - val_accuracy: 0.9989 - val_loss: 0.0056\n","Epoch 2/30\n","1222/1222 - 6s - 5ms/step - accuracy: 0.9966 - loss: 0.0117 - val_accuracy: 0.9994 - val_loss: 0.0023\n","Epoch 3/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9982 - loss: 0.0066 - val_accuracy: 0.9992 - val_loss: 0.0016\n","Epoch 4/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9987 - loss: 0.0044 - val_accuracy: 1.0000 - val_loss: 4.5459e-04\n","Epoch 5/30\n","1222/1222 - 4s - 3ms/step - accuracy: 0.9986 - loss: 0.0044 - val_accuracy: 0.9993 - val_loss: 0.0018\n","Epoch 6/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9994 - loss: 0.0022 - val_accuracy: 0.9998 - val_loss: 3.1457e-04\n","Epoch 7/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9989 - loss: 0.0031 - val_accuracy: 1.0000 - val_loss: 1.6304e-04\n","Epoch 8/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9989 - loss: 0.0037 - val_accuracy: 0.9995 - val_loss: 0.0027\n","Epoch 9/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9996 - loss: 0.0014 - val_accuracy: 1.0000 - val_loss: 1.8384e-04\n","Epoch 10/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9992 - loss: 0.0022 - val_accuracy: 0.9996 - val_loss: 0.0016\n","Epoch 11/30\n","1222/1222 - 4s - 4ms/step - accuracy: 0.9996 - loss: 0.0013 - val_accuracy: 1.0000 - val_loss: 2.3621e-05\n","Epoch 12/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9994 - loss: 0.0017 - val_accuracy: 1.0000 - val_loss: 1.4138e-04\n","Epoch 13/30\n","1222/1222 - 6s - 5ms/step - accuracy: 0.9992 - loss: 0.0027 - val_accuracy: 1.0000 - val_loss: 9.1938e-05\n","Epoch 14/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9994 - loss: 0.0017 - val_accuracy: 1.0000 - val_loss: 6.9294e-05\n","Epoch 15/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9997 - loss: 9.0743e-04 - val_accuracy: 1.0000 - val_loss: 1.4689e-04\n","Epoch 16/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9999 - loss: 3.5197e-04 - val_accuracy: 1.0000 - val_loss: 3.0774e-05\n","Epoch 17/30\n","1222/1222 - 4s - 3ms/step - accuracy: 0.9993 - loss: 0.0023 - val_accuracy: 1.0000 - val_loss: 7.6659e-06\n","Epoch 18/30\n","1222/1222 - 4s - 3ms/step - accuracy: 0.9998 - loss: 8.6767e-04 - val_accuracy: 1.0000 - val_loss: 9.9170e-06\n","Epoch 19/30\n","1222/1222 - 4s - 3ms/step - accuracy: 0.9997 - loss: 0.0014 - val_accuracy: 1.0000 - val_loss: 3.0669e-05\n","Epoch 20/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9997 - loss: 6.7290e-04 - val_accuracy: 0.9998 - val_loss: 3.7087e-04\n","Epoch 21/30\n","1222/1222 - 4s - 4ms/step - accuracy: 0.9997 - loss: 9.3890e-04 - val_accuracy: 0.9996 - val_loss: 0.0017\n","Epoch 22/30\n","1222/1222 - 6s - 5ms/step - accuracy: 0.9996 - loss: 0.0014 - val_accuracy: 1.0000 - val_loss: 1.4116e-05\n","Epoch 23/30\n","1222/1222 - 4s - 4ms/step - accuracy: 0.9997 - loss: 0.0011 - val_accuracy: 0.9999 - val_loss: 4.0716e-04\n","Epoch 24/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9998 - loss: 6.2547e-04 - val_accuracy: 1.0000 - val_loss: 1.4826e-05\n","Epoch 25/30\n","1222/1222 - 4s - 3ms/step - accuracy: 0.9998 - loss: 7.6371e-04 - val_accuracy: 1.0000 - val_loss: 2.9119e-06\n","Epoch 26/30\n","1222/1222 - 4s - 4ms/step - accuracy: 0.9997 - loss: 7.2718e-04 - val_accuracy: 1.0000 - val_loss: 6.7357e-06\n","Epoch 27/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9998 - loss: 4.3633e-04 - val_accuracy: 1.0000 - val_loss: 2.3641e-06\n","Epoch 28/30\n","1222/1222 - 6s - 5ms/step - accuracy: 0.9998 - loss: 8.2318e-04 - val_accuracy: 1.0000 - val_loss: 1.0321e-05\n","Epoch 29/30\n","1222/1222 - 5s - 4ms/step - accuracy: 0.9997 - loss: 0.0010 - val_accuracy: 0.9996 - val_loss: 6.5988e-04\n","Epoch 30/30\n","1222/1222 - 3s - 3ms/step - accuracy: 0.9996 - loss: 0.0011 - val_accuracy: 1.0000 - val_loss: 8.9273e-07\n","Test Accuracy: 1.0000\n"]}]}]}