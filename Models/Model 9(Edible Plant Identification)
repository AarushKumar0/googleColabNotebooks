{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPRhZ/dm7OpGOUFycCHId61"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eAskf0m2A-sI","executionInfo":{"status":"ok","timestamp":1752874513234,"user_tz":240,"elapsed":22062,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"813901ca-2e29-41f4-d7b5-58f1b93adb97"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"]},{"cell_type":"code","source":["data_dir = '/content/drive/My Drive/ediblePlants/resized'"],"metadata":{"id":"aL98ukHhEbFn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import os\n","import random\n","import shutil\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization"],"metadata":{"id":"n3c-GaEJEg3-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","datagen = ImageDataGenerator(\n","    rescale=1./255,\n","    rotation_range=20,\n","    width_shift_range=0.1,\n","    height_shift_range=0.1,\n","    shear_range=0.1,\n","    zoom_range=0.1,\n","    horizontal_flip=True,\n","    fill_mode='nearest',\n","    validation_split=0.2\n",")\n","\n","train_generator = datagen.flow_from_directory(\n","    directory=data_dir,\n","    target_size=(150, 150),\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='training',\n","    shuffle=True\n",")\n","\n","val_generator = datagen.flow_from_directory(\n","    directory=data_dir,\n","    target_size=(150, 150),\n","    batch_size=32,\n","    class_mode='categorical',\n","    subset='validation',\n","    shuffle=True\n",")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xB4e-_2pEjum","executionInfo":{"status":"ok","timestamp":1752874533104,"user_tz":240,"elapsed":16439,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"d94290ff-096f-4ebf-d081-ed8b52e738f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 13232 images belonging to 35 classes.\n","Found 3294 images belonging to 35 classes.\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization\n","from tensorflow.keras.optimizers import Adam\n","\n","num_classes = 35\n","input_shape = (150, 150, 3)\n","\n","model = Sequential([\n","    Conv2D(32, (3, 3), activation='relu', padding='same', input_shape=input_shape),\n","    BatchNormalization(),\n","    Conv2D(32, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    MaxPooling2D(pool_size=(2, 2)),\n","    Dropout(0.25),\n","\n","    Conv2D(64, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    Conv2D(64, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    MaxPooling2D(pool_size=(2, 2)),\n","    Dropout(0.3),\n","\n","    Conv2D(128, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    Conv2D(128, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    MaxPooling2D(pool_size=(2, 2)),\n","    Dropout(0.4),\n","\n","    Conv2D(256, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    Conv2D(256, (3, 3), activation='relu', padding='same'),\n","    BatchNormalization(),\n","    MaxPooling2D(pool_size=(2, 2)),\n","    Dropout(0.4),\n","\n","    Flatten(),\n","    Dense(256, activation='relu'),\n","    BatchNormalization(),\n","    Dropout(0.5),\n","    Dense(num_classes, activation='softmax')\n","])\n","\n","model.compile(optimizer=Adam(learning_rate=1e-4),\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mlww0ybtJIqM","executionInfo":{"status":"ok","timestamp":1752874535923,"user_tz":240,"elapsed":2805,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"2fac8f7c-6b1e-4108-ea85-6db669176ab8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.utils.class_weight import compute_class_weight\n","import numpy as np\n","\n","class_indices = train_generator.class_indices\n","class_names = list(class_indices.keys())\n","num_classes = len(class_names)\n","\n","labels = train_generator.classes\n","\n","class_weights = compute_class_weight(\n","    class_weight='balanced',\n","    classes=np.unique(labels),\n","    y=labels\n",")\n","class_weights = dict(enumerate(class_weights))\n","\n","early_stop = EarlyStopping(\n","    monitor='val_loss',\n","    patience=3,\n","    restore_best_weights=True\n",")\n","\n","history = model.fit(\n","    train_generator,\n","    epochs=30,\n","    validation_data=val_generator,\n","    callbacks=[early_stop],\n","    class_weight=class_weights\n",")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pNBniUj2JMz4","executionInfo":{"status":"ok","timestamp":1752892580028,"user_tz":240,"elapsed":18044100,"user":{"displayName":"Aarush Kumar","userId":"16118659533235147067"}},"outputId":"6b79a44a-d131-446a-f396-d62c901fb8f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n","  self._warn_if_super_not_called()\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m13239s\u001b[0m 32s/step - accuracy: 0.0935 - loss: 4.0972 - val_accuracy: 0.0428 - val_loss: 5.0784\n","Epoch 2/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m186s\u001b[0m 450ms/step - accuracy: 0.2251 - loss: 2.8890 - val_accuracy: 0.2626 - val_loss: 2.6083\n","Epoch 3/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m188s\u001b[0m 454ms/step - accuracy: 0.3095 - loss: 2.4861 - val_accuracy: 0.2741 - val_loss: 2.6082\n","Epoch 4/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m185s\u001b[0m 448ms/step - accuracy: 0.3450 - loss: 2.2842 - val_accuracy: 0.3185 - val_loss: 2.3393\n","Epoch 5/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m186s\u001b[0m 450ms/step - accuracy: 0.3864 - loss: 2.1484 - val_accuracy: 0.3497 - val_loss: 2.3169\n","Epoch 6/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m188s\u001b[0m 455ms/step - accuracy: 0.4272 - loss: 1.9847 - val_accuracy: 0.4174 - val_loss: 2.0147\n","Epoch 7/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m203s\u001b[0m 458ms/step - accuracy: 0.4600 - loss: 1.8484 - val_accuracy: 0.4038 - val_loss: 2.1176\n","Epoch 8/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m192s\u001b[0m 463ms/step - accuracy: 0.4932 - loss: 1.7431 - val_accuracy: 0.3895 - val_loss: 2.1368\n","Epoch 9/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m186s\u001b[0m 450ms/step - accuracy: 0.5071 - loss: 1.6746 - val_accuracy: 0.4891 - val_loss: 1.7132\n","Epoch 10/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m200s\u001b[0m 446ms/step - accuracy: 0.5407 - loss: 1.5480 - val_accuracy: 0.5033 - val_loss: 1.7119\n","Epoch 11/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m186s\u001b[0m 449ms/step - accuracy: 0.5584 - loss: 1.4721 - val_accuracy: 0.4323 - val_loss: 2.0500\n","Epoch 12/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m184s\u001b[0m 445ms/step - accuracy: 0.5813 - loss: 1.4072 - val_accuracy: 0.5103 - val_loss: 1.7513\n","Epoch 13/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m190s\u001b[0m 459ms/step - accuracy: 0.5966 - loss: 1.3529 - val_accuracy: 0.5522 - val_loss: 1.5177\n","Epoch 14/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m196s\u001b[0m 446ms/step - accuracy: 0.6172 - loss: 1.2972 - val_accuracy: 0.5586 - val_loss: 1.5419\n","Epoch 15/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m191s\u001b[0m 461ms/step - accuracy: 0.6344 - loss: 1.2039 - val_accuracy: 0.5674 - val_loss: 1.4780\n","Epoch 16/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m188s\u001b[0m 454ms/step - accuracy: 0.6439 - loss: 1.1853 - val_accuracy: 0.5641 - val_loss: 1.5386\n","Epoch 17/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m185s\u001b[0m 448ms/step - accuracy: 0.6650 - loss: 1.1255 - val_accuracy: 0.6287 - val_loss: 1.2830\n","Epoch 18/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m192s\u001b[0m 464ms/step - accuracy: 0.6754 - loss: 1.0766 - val_accuracy: 0.6336 - val_loss: 1.2701\n","Epoch 19/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m200s\u001b[0m 460ms/step - accuracy: 0.6817 - loss: 1.0326 - val_accuracy: 0.6545 - val_loss: 1.2629\n","Epoch 20/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m184s\u001b[0m 444ms/step - accuracy: 0.7029 - loss: 0.9977 - val_accuracy: 0.6655 - val_loss: 1.1484\n","Epoch 21/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m191s\u001b[0m 462ms/step - accuracy: 0.7086 - loss: 0.9598 - val_accuracy: 0.6700 - val_loss: 1.1989\n","Epoch 22/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m183s\u001b[0m 443ms/step - accuracy: 0.7207 - loss: 0.9236 - val_accuracy: 0.6560 - val_loss: 1.2644\n","Epoch 23/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m191s\u001b[0m 461ms/step - accuracy: 0.7251 - loss: 0.8881 - val_accuracy: 0.7134 - val_loss: 1.0368\n","Epoch 24/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m181s\u001b[0m 438ms/step - accuracy: 0.7397 - loss: 0.8545 - val_accuracy: 0.6393 - val_loss: 1.3335\n","Epoch 25/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m201s\u001b[0m 436ms/step - accuracy: 0.7459 - loss: 0.8243 - val_accuracy: 0.6873 - val_loss: 1.1221\n","Epoch 26/30\n","\u001b[1m414/414\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m188s\u001b[0m 455ms/step - accuracy: 0.7541 - loss: 0.8120 - val_accuracy: 0.6688 - val_loss: 1.1989\n"]}]}]}